Problem: Pa1_triangles

When Pawan was in high school he was fascinated by the beauty of Pascal's traingle. Soon he invented his own traingles, the "pa1-triangles", which he traced out on his fauvorite rough note book.

To construct a pa1-triangle, Pawan used to generate a random base list of n numbers. The ith entry in the mth row was equal to the sum of ith and (i+1)th enties in the (m+1)th row. For a base list of size n the last row(nth row) has n entries and 1st row has only one entry(root entry). For example, some pa1-triangles which he still remembers:

   17	
  8	9
 5 3 6
3 2 1 5

  7
 3 4
1 2 2

As time passed his triangles got erased...

Yesterday he found his old rough note book. All elements other than the root entry were erased.

Pawan was curious to know how many different base lists of size n could have generated a pa1-trianlge with this root entry.
Since the number of such pyramids might be enormous, return the result modulo 1000000009.

Input:
First line contains t, the number of test cases.
Each test case contains two integers n and r, where n is the size of the base list and r is the root entry.


Output:
Print the number of possible base lists which can generate pa1-triangles with root entry equal to r modulo 1000000009.

Constraints:
t<150
2<=n<=1000000
1<=r<=1000000

Time Limit:
10s


Sample input:
1
3 5  
5 16 
4 15 

Sample output:
2
1
24

Explaination:
There are only two possible pa1-triangles with root entry 5, and base list size 3. These are:

  5
 2 3
1 1 2

and

  5
 3 2
2 1 1



